<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>ControlFloor</title>

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto&display=swap" />
<link rel="stylesheet" href="/assets/css/styles.css" />
<link rel="stylesheet" href="/assets/css/sidebar.css" />
<link href="https://unpkg.com/@mountable/spinners@0.0.25/dist/mSpinnerSwirl.css" rel="stylesheet">
<script src="/assets/js/iconify_icons.js"></script>

<meta charset="utf-8">
<style>
  canvas {
    border: solid 1px black;
  }
  .m-spinner--swirl {
    --spinner-color: red;
    --spinner-color-secondary: blue;
  }
  .hidden {
    display: none;
  }
  #back {
    font-size:64px;
    margin-right: 30px;
  }
  #under svg {
    position: relative;
    top: 10px;
    font-size:50px;
    cursor: pointer;
  }
  #d_name, #d_model, #d_iosversion, #d_udid {
    white-space: nowrap;
  }
  .note {
    padding: 10px;
    margin: 5px;
    background-color: #e8e7b0;
  }
  .notedet {
    padding: 10px;
    margin: 5px;
  }
  .detholder {
    position: absolute;
    margin-left: 20px;
    border: solid 2px blue;
    height: 200px;
    width: 400px;
    background-color: #e8e7b0;
  }
  #shutdown {
    font-size:40px;
    cursor: pointer;
  }
  #shutdown:hover:after {
    font-size: 12pt;
    content: "Reset device provision. Clicking this will reset the device control and video. If the device is not responding to clicking or video is not shown click this to reset. It will take around 30 seconds to reset.";
    display: block;
    position: relative;
    top: 0px;
    left: 40px;
    width: 300px;
    padding: 10px;
    background: #e8e7b0;
    border: solid 2px blue;
  }
  #ta {
    position: absolute;
    top: 0px;
    left: 0px;
    width: 375px;
    height: 667px;
    z-index: 2;
    background: transparent;
    border: none;
    resize: none;
    caret-color: transparent;
    cursor: pointer;
    color: rgba(0,0,0,0);
  }
</style>
<script>
  function getel( id ) {
    return document.getElementById( id );
  }
  function ntext( text ) {
    return document.createTextNode( text );
  }
  function ndiv() {
    return document.createElement("div");
  }
  function filltext( id, text ) {
    var parent = getel(id);
    var node = ntext( text );
    parent.appendChild( node );
  }
  function getCursorPosition(canvas, event) {
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    console.log("x: " + x + " y: " + y)
    return [x,y];
  }
  function _replace(node,rep) {
    node.parentNode.replaceChild(rep,node);
  }
  function loadIcons() {
    var icons = document.getElementsByClassName("iconify");
    var dp = new DOMParser();
    for( var i=0;i<icons.length;i++ ) {
    //while( icons.length ) {
      var icon = icons[i];
      var id = icon.id;
      var cls = icon.className;
      var mdiName = icon.dataset.icon;
      var width = 40;
      var height = 40;
      var svgText = "<div style='display:inline-block; width:"+width+"px; height:"+height+"px;'>"+
        "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">" +
        iconify_icons[ mdiName.replace("mdi-","") ] + "</svg></div>";
      var frag = dp.parseFromString( svgText, "text/html" ).body.childNodes[0];
      _replace( icon, frag );
      frag.id = id;
      frag.className = cls;
    }
  }
  var session='';
  var udid="{{ html .udid }}";
  var clickWid={{ html .clickWidth }}*1;
  var clickHeg={{ html .clickHeight }}*1;
  var vidWid={{ html .vidWidth }}*1;
  var vidHeg={{ html .vidHeight }}*1;
  var maxHeg={{ html .maxHeight }}*1;
  var displayWid=0;
  var displayHeg=0;
  var base = document.location.protocol + '//' + document.location.host;
  var gone = 0;
  var rid="{{ html .rid }}";
  var idleTimeout = "{{ html .idleTimeout }}" * 1;
  var keyid = 0;
  var mouseDownDate;
  var mouseUpDate;
  var info = JSON.parse( {{ html .rawInfo }} );
  var notestext = {{ html .notes }};
  var notesjson = JSON.parse( notestext );
  
  if( vidHeg < maxHeg ) {
    displayHeg = vidHeg;
    displayWid = vidWid;
  } else {
    var wOverH = vidWid / vidHeg;
    displayHeg = maxHeg;
    displayWid = maxHeg * wOverH;
  }
  function req( type, url, handler, body ) {
    var xhr = new XMLHttpRequest();
    xhr.open( type, url, true );
    xhr.responseType = 'json';
    xhr.onload = function(x) { handler(x,xhr); }
    if( type == 'POST' && body ) {
        if( typeof( body ) == 'object' ) {
            var data = new FormData();
            var test = {};
            for( var k in body ) if( body.hasOwnProperty( k ) ) { data.append( k, body[k] ); test[k] = body[k]; }
            console.log( test );
            xhr.send( data );
        }
        else xhr.send(body);
    }
    else xhr.send();
  }
  
  var waitnum = 0;
  function wait() {
    if( !waitnum ) {
      var waiter = getel("waiter");
      waiter.className = "m-spinner--swirl";
    }
    waitnum++;
  }
  function unwait() {
    if( waitnum > 0 ) waitnum--;
    if( !waitnum ) {
      var waiter = getel("waiter");
      waiter.className = "m-spinner--swirl hidden";
    }
  }
  
  function clickAt( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/click', function() {
      unwait();
    }, { udid, x, y } );
  }
  function doMouseDown( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/mouseDown', function() {
      unwait();
    }, { udid, x, y } );
  }
  function doMouseUp( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/mouseUp', function() {
      unwait();
    }, { udid, x, y } );
  }
  function doHardPress( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/hardPress', function() {
      unwait();
    }, { udid, x, y } );
  }
  function doLongPress( pos, time ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/longPress', function() {
      unwait();
    }, { udid, x, y, time } );
  }
  function swipe( pos1, pos2, delay ) {
    var x1 = Math.floor( (pos1[0]/displayWid)*clickWid ); 
    var y1 = Math.floor( (pos1[1]/displayHeg)*clickHeg );
    var x2 = Math.floor( (pos2[0]/displayWid)*clickWid ); 
    var y2 = Math.floor( (pos2[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/swipe', function() {
      unwait();
    }, { udid, x1, y1, x2, y2, delay } );    
  }
  function doShutdown() {
    wait();
    req( 'POST', base + '/device/shutdown', function() {
      unwait();
      location.reload();
    }, { udid } );    
  }
  function videoStop() {
    req( 'POST', base + "/device/videoStop?udid="+udid+"&rid="+rid, function() {}, {} );    
  }
  var keyqueue = [];
  var prevKeys = [];
  var inRequest = 0;
  var pos1;
  /*
  sendKeys has been hacked up a bunch since it was originally written.
  Right now it is sending a single key at a time and waiting for that
  call to complete before sending another key.
  
  This is done to prevent concurrency from causing keys to be entered
  out of typing order.
  
  There is additional information being sent that is not needed currently
  that could be used to be extremely sure keys are never sent out of order.
  
  This function can still be improved some more, as if keys are backed up
  and waiting to be sent we could send more than a single key at once.
  
  The backend doesn't handle doing that as well as desired so that is
  avoided currently.
  */
  function sendKeys() {
    if( !keyqueue.length || inRequest ) return;
    //var keys = keyqueue.join("");
    var keyOb = keyqueue.shift();
    
    //keyqueue = [];
    inRequest = 1;
    wait();
    req( 'POST', base + '/device/keys', function() {
      unwait();
      inRequest = 0;
      if( keyqueue.length ) sendKeys();
    }, {
      udid: udid,
      keys: keyOb.keycode,
      curid: keyOb.keyid,
      prevkeys: prevKeys.join("")
    } );
    prevKeys.unshift( keyOb.keyid );
    while( prevKeys.length > 5 ) prevKeys.pop();
  }
  
  function sendText( text ) {
    wait();
    req( 'POST', base + '/device/text', function() {
      unwait();
    }, {
      udid: udid,
      text: text
    } );
  }
  
  var mode = 'normal';
  var capture  = {}; // onkeydown
  var capture2 = {}; // onkeypress
  capture[-8] = -8; // backspace
  capture[-9] = -9; // tab
  capture[-13] = -13; // enter
  capture[-34] = -34; // pagedown
  capture[-33] = -33; // pageup
  capture[-35] = -35; // end
  capture[-36] = -36; // home
  capture[-37] = -37; // left
  capture[-38] = -38; // up
  capture[-39] = -39; // right
  capture[-40] = -40; // down
  capture[-46] = -46; // delete
  
  //capture[68] = 68; // delete; map to ascii delete
  capture2[39] = 39; // ' - quick search in firefox
  capture2[47] = 47; // / - quick search also
  window.addEventListener("load", function(evt) {
    loadIcons();
    filltext( "d_name", info.DeviceName );
    filltext( "d_model", info.ArtworkDeviceProductDescription );
    filltext( "d_iosversion", info.ProductVersion );
    filltext( "d_udid", info.UniqueDeviceID );
  
    var canvas    = getel("canvas");
    var ctx       = canvas.getContext("2d", { alpha: false });
    var home      = getel("home");
    //var taskBtn   = getel("taskBtn");
    //var shakeBtn  = getel("shakeBtn");
    var ccBtn     = getel("ccBtn");
    var atBtn     = getel("atBtn");
    var hardPress = getel("hardPress");
    var longPress = getel("longPress");
    //var vectorBtn = getel("vectorBtn");
    var under     = getel("under");
    var vidbox    = getel("vidbox");
    var ws;
    var loading   = getel("loading");
    var notesbox  = getel("notes");
    var shutdown  = getel("shutdown");
    var ta        = getel("ta");
    var sizes = [];
    var times = [];

    hardPress.childNodes[0].setAttribute("fill","");
    longPress.childNodes[0].setAttribute("fill","");
    //vectorBtn.childNodes[0].setAttribute("fill","");
    
    var ties = {};
    for( var i=0; i<notesjson.length; i++ ) {
      var anote = notesjson[i];
      var notediv = ndiv();
      notediv.className = "note";
      //var notetext = ntext( anote.short );
      //notediv.appendChild( notetext );
      notediv.innerHTML = anote.short;
      
      var detholder = ndiv();
      detholder.className = "detholder hidden";
      
      var notedetail = ndiv();
      notedetail.className = "notedet";
      var notedetailtext = ntext( anote.long );
      notedetail.appendChild( notedetailtext );
      detholder.appendChild( notedetail );
      
      var mouseover = notediv.onmouseover = function() {
        this.detail.className = "detholder" 
      }.bind(anote)
      
      var mouseout = notediv.onmouseout = function() {
        this.detail.className = "detholder hidden";
      }.bind(anote)
      
      anote.detail = detholder;
      
      notesbox.appendChild( notediv );
      notesbox.appendChild( detholder );
      
      if( anote.tie ) {
        ties[anote.tie] = {
          mouseover: mouseover,
          mouseout: mouseout
        }
      }
    }
    
    var idleSeconds = 0;
    
    //vidbox.style.width  = ( displayWid + 100 ) + "px";
    canvas.width      = displayWid;
    canvas.height     = displayHeg;
    ta.style.width = displayWid + "px";
    ta.style.height = displayHeg + "px";
    getel("mid").style.width = displayWid + "px";
    under.style.top = displayHeg + "px";
    under.style.width = displayWid + "px";
    //loading.style.left = ( displayWid / 2 -50 ) + "px";
    //loading.style.top = ( displayHeg / 2 - 50 ) + "px";
    
    home.onclick = function( event ) {
      wait();
      req( 'POST', '/device/home', function() {
        unwait();
      }, { udid } );  
    }
    /*taskBtn.onclick = function( event ) {
      wait();
      req( 'POST', '/device/taskSwitcher', function() {
        unwait();
      }, { udid } );  
    }
    shakeBtn.onclick = function( event ) {
      wait();
      req( 'POST', '/device/shake', function() {
        unwait();
      }, { udid } );  
    }*/
    ccBtn.onclick = function( event ) {
      wait();
      req( 'POST', '/device/cc', function() {
        unwait();
      }, { udid } );  
    }
    atBtn.onclick = function( event ) {
      wait();
      req( 'POST', '/device/assistiveTouch', function() {
        unwait();
      }, { udid } );  
    }
    hardPress.onclick = function( event ) {
      if( mode != 'hard' ) {
        hardPress.setAttribute( "class", 'iconify iconfiy-mdi mActive' );
        longPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive');
        //vectorBtn.setAttribute( "class", "iconify iconify-mdi mInactive");
        mode = 'hard';
      } else {
        hardPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive' );
        mode = 'normal';
      }
    }
    /*vectorBtn.onclick = function( event ) {
      if( mode != 'vector' ) {
        hardPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive' );
        longPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive');
        vectorBtn.setAttribute( "class", "iconify iconify-mdi mActive");
        mode = 'vector';
      } else {
        vectorBtn.setAttribute( "class", 'iconify iconfiy-mdi mInactive' );
        mode = 'normal';
      }
    }*/
    if( ties["hardpress"] ) {
      var det = ties["hardpress"];
      hardPress.onmouseover = det.mouseover;
      hardPress.onmouseout = det.mouseout;
    }
    longPress.onclick = function( event ) {
      if( mode != 'long' ) {
        longPress.setAttribute( "class", 'iconify iconfiy-mdi mActive' );
        hardPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive' );
        //vectorBtn.setAttribute( "class", "iconify iconify-mdi mInactive");
        mode = 'long';
      } else {
        longPress.setAttribute( "class", 'iconify iconfiy-mdi mInactive' );
        mode = 'normal';
      }
    }
    shutdown.onclick = function( event ) {
      var ok = confirm("This will shutdown/reset the device provider. Are you sure?");
      if( ok ) {
        videoStop();
        if( ws ) ws.close();
        doShutdown();
      }
    }
    if( ties["longpress"] ) {
      var det = ties["longpress"];
      longPress.onmouseover = det.mouseover;
      longPress.onmouseout = det.mouseout;
    }
    
    ta.onmousedown = function( event ) {
      mouseDownDate = new Date();
      var pos = getCursorPosition( canvas, event );
      if( mode == 'hard' ) doHardPress( pos );
      else if( mode == 'vector' ) doMouseDown( pos );
      else                      pos1 = pos;
    }
    
    ta.onmouseup = function( event ) {
      if( mode == 'vector' ) {
        var pos = getCursorPosition( canvas, event );
        doMouseUp( pos );
        return;
      }
      if( !mouseDownDate ) {
        alert("Cannot swipe from offscreen onto the screen");
        return;
      }
      if( mode != 'normal' && mode != "long" ) return;
      mouseUpDate = new Date();
      var msDiff = mouseUpDate - mouseDownDate;
      mouseDownDate = 0;
      var sDiff = msDiff / 1000;
      sDiff = Math.floor( sDiff * 100 ) / 100; // .00 resolution
      var pos2 = getCursorPosition( canvas, event );
      
      if( mode == 'long' ) {
        doLongPress( pos1, sDiff );
        return;
      }
      
      var dx = Math.abs( pos2[0] - pos1[0] );
      var dy = Math.abs( pos2[1] - pos1[1] );
      if( dx > 3 || dy > 3 ) {
        swipe( pos1, pos2, sDiff );
      }
      else clickAt( pos1 );
    }
    
    ta.onchange = function() {
      
    }
    
    ta.onkeydown = function( event ) {
      var key = event.key;
      if( key == "Shift" ) return;
      if( key.length==1 ) key = key.charCodeAt(0);
      else key = -event.keyCode;
      
      if( capture[ key ] ) {
        key = capture[ key ];
        event.preventDefault();
        keyqueue.push( {
          keycode: key,
          keyid: keyid
        } );
        keyid++;
        sendKeys();
      }
      else console.log( "key " + key );
      
      setTimeout( function() {
          ta.value = "";
      }, 10 );
    }
    
    ta.onkeypress = function( event ) {
      var key = event.key;
      
      if( key.length==1 ) key = key.charCodeAt(0);
      else key = -event.keyCode;
      
      keyqueue.push( {
        keycode: key,
        keyid: keyid
      } );
      keyid++;
      sendKeys();
      if( capture2[ key ] ) {
        event.preventDefault();
      } else console.log( "key2 " + key );
    }
    
    ta.onpaste = function(e) {
      var text = "";
      if( e.clipboardData && e.clipboardData.getData ) {
        text = e.clipboardData.getData('text/plain');
      }
      if( text == "" ) return false;
      sendText( text );
      return false;
    }
    
    var wsprot = ( document.location.protocol == 'https:' ) ? "wss" : "ws"; 
    var url = wsprot+"://"+document.location.host+"/device/imgStream?udid={{ html .udid }}&rid={{ html .rid }}";
    ws = new WebSocket( url );
    ws.onopen = function( event ) {
        console.log("Websocket open");
    }
    ws.onclose = function( event ) {
        console.log("Websocket closed");
        ws = null;
    }
    ws.onmessage = function( event ) {
        if( event.data instanceof Blob ) {
          var recvTime = new Date().getTime();
          var image = new Image();
          var url;
          image.onload = function() {
            URL.revokeObjectURL( url );
            ctx.drawImage(image, 0, 0, Math.floor(displayWid)+1, Math.floor(displayHeg) );
          };
          image.onerror = function( e ) {
            console.log('Error during loading image:', e);
          }
          var blob = event.data;
          var imgData = blob.slice( 0, -100, "image/jpeg" );
          blob.slice( -100, blob.size, "" ).text().then( serverTimeStr => {
              //console.log( "serverTimeStr " + serverTimeStr );
              var serverTime = parseInt( serverTimeStr );
              var diff = recvTime - serverTime;
              if( diff < 0 ) diff = 0;
              //console.log( recvTime + " - " + serverTime + " = " + diff );
              
              //var bpms = (blob.size-100) / diff;
              //var bps = bpms * 1000;
              //console.log( "bps " + bps );
              sizes.push( blob.size );
              times.push( diff );
              if( sizes.length == 5 ) {
                  var totSize = 0;
                  var totTime = 0;
                  for( var i=0;i<5;i++ ) {
                      totSize += sizes[i];
                      totTime += times[i];
                  }
                  var bps = Math.floor( totSize / totTime * 1000 );
                  if( bps > 10000000 ) {
                      bps = 10000000;
                  }
                  //console.log("bps " + bps);
                  sizes = [];
                  times = [];
                  var avgFrame = Math.floor( totSize / 5 );
                  ws.send( "{\"bps\":\"" + bps + "\",\"avgFrame\":\"" + avgFrame + "\"}" );
              }
          } );
          
          url = URL.createObjectURL( blob );
          image.src = url;
        }
        else {
            var data = event.data;
            if( typeof data === 'string' ) {
                var recvTime = new Date().getTime();
                var l1 = data[0];
                if( l1 >= '0' && l1 <= '9' ) {
                    var serverTime = parseInt( data );
                    var diff = recvTime - serverTime;
                    //console.log( "latency:" + diff );
                }
                else if( l1 == '{' ) {
                    var json = JSON.parse( data );
                    var type = json.type;
                    if( type ) {
                        if( type == 'kick' ) {
                            alert("You have been kicked");
                            document.location.href = "/";
                        }
                        if( type == 'sync' ) {
                            var serverTime = json.serverTime;
                            //console.log( "serverTime is " + serverTime );
                            var ourTime = Date.now();//new Date().getTime();
                            //console.log( "ourTime is " + ourTime );
                            
                            var diff = ourTime - serverTime;
                            
                            ws.send( "{\"clientTime\":\"" + ourTime + "\",\"sentTime\":\"" + serverTime + "\"}" );
                            
                            //console.log( "latency + time offset = " + diff );
                        }
                    }
                } else if( data == "ping" ) {
                    console.log("ping");
                } else {
                    var parts = data.split(',');
                    if( parts[0] == 'sync' ) {
                        var serverTime = parts[1];
                        var ourTime = Date.now();//new Date().getTime();
                        var diff = ourTime - serverTime;
                            
                        ws.send( "{\"clientTime\":\"" + ourTime + "\",\"sentTime\":\"" + serverTime + "\"}" );
                        
                        console.log( "latency + time offset = " + diff );
                    }
                }
            }
            //console.log( event.data );
        }
    }
    ws.onerror = function( event ) {
        console.log( "Error: ", event.data );
    }
    if( idleTimeout ) {
      setInterval( function() {
        idleSeconds += 3;
        if( idleSeconds > idleTimeout ) {
          ws.close();
          navigator.sendBeacon( "/device/videoStop?udid="+udid+"&rid="+rid, "" );
          alert("Inactivity timeout");
          document.location.href = '/';
        }
      }, 3000 );
      window.onmousemove = function() {
        idleSeconds = 0;
      }
    }
  });
</script>
</head>

<body>
    <div id="main" class="main">
        <div>
            <table style="margin:auto; position: relative;"><tr>
                <td valign="top">
                    <div style="display: inline-block">
                        <a href='/'><i id='back' class="iconify" data-icon="mdi-arrow-left-bold"></i></a>
                    </div>
                </td>
                <td style="position:relative" id="mid">
                    <!--<i id="loading" style="vertical-align: top; position: absolute; left:100px; top:100px; font-size:100px;" class="m-spinner--swirl"></i>-->
                    <textarea id="ta"></textarea>
                    <canvas id="canvas" width="375" height="667" style="position:absolute; top:0px; left:0px;"></canvas><br>
                    <div style="position: absolute; width:375px; font-size: 32px" id="under">
                        <center>
                            <i id="home" class="iconify" data-icon="mdi-home"></i>
                            <i id="hardPress" class="iconify" data-icon="mdi-anvil"></i>
                            <i id="longPress" class="iconify" data-icon="mdi-alarm-multiple"></i>
                            <!--<i id="taskBtn" class="iconify" data-icon="mdi-content-duplicate"></i>
                            <i id="shakeBtn" class="iconify" data-icon="mdi-cards-outline"></i>-->
                            <i id="ccBtn" class="iconify" data-icon="mdi-view-dashboard-outline"></i>
                            <i id="atBtn" class="iconify" data-icon="mdi-circle-box"></i>
                            <!--<i id="vectorBtn" class="iconify" data-icon="mdi-vector-polyline"></i>-->
                        </i>
                    </div>
                </td>
                <td valign="top" style="padding: 15px">
                    <table cellpadding=10 cellspacing=0>
                        <tr>
                            <td>Name</td>
                            <td id="d_name"></td>
                        </tr>
                        <tr>
                            <td>Model</td>
                            <td id="d_model"></td>
                        </tr>
                        <tr>
                            <td><nobr>iOS Version</nobr></td>
                            <td id="d_iosversion"></td>
                        </tr>
                        <tr>
                            <td><nobr>UDID</nobr></td>
                            <td id="d_udid"></td>
                        </tr>
                        <tr><td colspan=2 id="notes"></td></tr>
                        <tr><td colspan=2>
                          <i id='shutdown' class="iconify" data-icon="mdi-bomb"></i>
                        </tr></tr>
                        <tr>
                          <td colspan=2>
                            <i id="waiter" style="vertical-align: top" class="hidden m-spinner--swirl"></i>
                          </td>
                        </td>
                    </table>
                </td>
            </tr></table>
        </div>
    </div>
</body>
</html>